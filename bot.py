import requests
import asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
ACCESS_TOKEN = os.getenv("ACCESS_TOKEN")
CHAT_TOKEN = os.getenv("CHAT_TOKEN")

COOKIES = {
    "ACCESS_TOKEN": ACCESS_TOKEN,
    "CHAT_TOKEN": CHAT_TOKEN,
}

HEADERS = {
    "Accept": "application/json",
    "User-Agent": "Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/141.0.0.0 Mobile Safari/537.36"
}

API_URL = "https://seller.ggsel.net/api/v1/conversations"
ORDERS_API_URL = "https://seller.ggsel.net/api/v1/orders"

# –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º –Ω–∏–∂–Ω–µ–º –º–µ–Ω—é
BUTTON_TEXT = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"
BUTTON_TEXT_ORDERS = "üßæ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑—ã"

# === –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ===
def get_unread():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"""
    params = {
        "show_only_unread": "true",
        "page": 1,
        "limit": 20,
        "sort[last_messages_at]": "desc"
    }
    r = requests.get(API_URL, params=params, headers=HEADERS, cookies=COOKIES)
    r.raise_for_status()
    return r.json().get("data", [])

def get_recent_orders():
    params = {
        "page": 1,
        "limit": 10,
        "sort[created_at]": "desc",
    }
    r = requests.get(ORDERS_API_URL, params=params, headers=HEADERS, cookies=COOKIES)
    r.raise_for_status()
    data = r.json()
    orders = []
    if isinstance(data, dict) and "data" in data:
        orders = data["data"]
    elif isinstance(data, list):
        orders = data
    else:
        return []

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "paid"
    filtered_orders = []
    for order in orders:
        status = order.get("status")
        if isinstance(status, str) and status.lower() == "paid":
            filtered_orders.append(order)
    return filtered_orders

def format_alert(chat):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    username = chat["user"]["username"]
    order_id = chat["order_id"]
    offer_title = chat["offer"]["title"] if chat["offer"] else "‚Äî"
    msg = chat["last_message"]

    if msg["is_current_user"] is False and msg["read"] is False:
        return (
            f"üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç <b>{username}</b>\n"
            f"üì¶ –ó–∞–∫–∞–∑ #{order_id} ‚Äî <i>{offer_title}</i>\n"
            f"üïí {msg['created_at']}\n"
            f"üí≠ <code>{msg['text']}</code>"
        )
    return None

def format_order_alert(order):
    title = order.get("offer_title", "‚Äî")
    email = order.get("buyer_email", "‚Äî")
    amount = order.get("amount", 0)
    status = order.get("status", "‚Äî")
    created_at = order.get("created_at", "‚Äî")
    number = order.get("number") or order.get("id", "‚Äî")
    return (
        f"üßæ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ<b>{number}</b>\n"
        f"üì¶ –¢–æ–≤–∞—Ä: <i>{title}</i>\n"
        f"üìß –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: <code>{email}</code>\n"
        f"üí∞ –°—É–º–º–∞: <b>{amount}</b>\n"
        f"üìå –°—Ç–∞—Ç—É—Å: <b>{status}</b>\n"
        f"üïí {created_at}"
    )

# === –¢–µ–ª–µ–≥—Ä–∞–º –∫–æ–º–∞–Ω–¥—ã –∏ –ª–æ–≥–∏–∫–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í–∫–ª—é—á–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é
    keyboard = [[KeyboardButton(BUTTON_TEXT), KeyboardButton(BUTTON_TEXT_ORDERS)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–ö–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑—É: –ø—Ä–æ–≤–µ—Ä—è–π –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ GGSel –∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ.",
        reply_markup=reply_markup
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ-–æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    chat_id = update.effective_chat.id
    seen_map = context.application.bot_data.setdefault("seen_keys", {})
    seen_map.setdefault(chat_id, set())
    orders_seen_map = context.application.bot_data.setdefault("seen_orders", {})
    orders_seen_map.setdefault(chat_id, set())

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    job_queue = getattr(context, "job_queue", None)
    if job_queue is not None:
        job_name = f"auto_check_{chat_id}"
        for job in job_queue.get_jobs_by_name(job_name):
            job.schedule_removal()
        job_queue.run_repeating(
            auto_check,
            interval=60,
            first=5,
            chat_id=chat_id,
            name=job_name,
        )
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∂–¥—ã–µ x –º–∏–Ω—É—Ç
        orders_job_name = f"auto_orders_{chat_id}"
        for job in job_queue.get_jobs_by_name(orders_job_name):
            job.schedule_removal()
        job_queue.run_repeating(
            auto_orders_check,
            interval=60,
            first=10,
            chat_id=chat_id,
            name=orders_job_name,
        )
    else:
        # –§–æ–ª–±—ç–∫ –±–µ–∑ JobQueue: –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        task_map = context.application.bot_data.setdefault("bg_tasks", {})
        t1 = task_map.get((chat_id, "msgs"))
        if t1 is None or t1.done():
            t1 = asyncio.create_task(_auto_check_loop(context.application, chat_id, 60))
            task_map[(chat_id, "msgs")] = t1
        t2 = task_map.get((chat_id, "orders"))
        if t2 is None or t2.done():
            t2 = asyncio.create_task(_auto_orders_loop(context.application, chat_id, 300))
            task_map[(chat_id, "orders")] = t2

async def manual_check(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    try:
        unread = get_unread()
        messages = []
        for chat in unread:
            alert = format_alert(chat)
            if alert:
                messages.append(alert)
        if messages:
            await update.message.reply_text("\n\n".join(messages), parse_mode="HTML")
        else:
            await update.message.reply_text("‚úÖ –ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

async def manual_check_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã...")
    chat_id = update.effective_chat.id
    try:
        orders = get_recent_orders()
        if not orders:
            await update.message.reply_text("‚úÖ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
            return
        orders_seen_map = context.application.bot_data.setdefault("seen_orders", {})
        seen_set = orders_seen_map.setdefault(chat_id, set())

        alerts = []
        for order in orders:
            oid = order.get("id") or order.get("number")
            if oid in seen_set:
                continue
            seen_set.add(oid)
            alerts.append(format_order_alert(order))

        if alerts:
            await update.message.reply_text("\n\n".join(alerts), parse_mode="HTML")
        else:
            await update.message.reply_text("‚úÖ –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

async def _auto_check_once(app: Application, chat_id: int):
    try:
        unread = get_unread()
        alerts = []
        seen_map = app.bot_data.setdefault("seen_keys", {})
        seen_set = seen_map.setdefault(chat_id, set())

        for chat in unread:
            alert = format_alert(chat)
            if not alert:
                continue
            msg = chat.get("last_message", {})
            created_at = msg.get("created_at")
            order_id = chat.get("order_id")
            key = f"{order_id}:{created_at}"
            if key in seen_set:
                continue
            seen_set.add(key)
            alerts.append(alert)

        if alerts:
            await app.bot.send_message(chat_id=chat_id, text="\n\n".join(alerts), parse_mode="HTML")
    except Exception as e:
        print(f"Auto-check error for {chat_id}: {e}")

async def auto_check(context: ContextTypes.DEFAULT_TYPE):
    # Callback –¥–ª—è JobQueue
    chat_id = context.job.chat_id
    await _auto_check_once(context.application, chat_id)

async def _auto_check_loop(app: Application, chat_id: int, interval_seconds: int):
    # –§–æ–ª–±—ç–∫-—Ü–∏–∫–ª, –µ—Å–ª–∏ JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    await asyncio.sleep(5)
    while True:
        await _auto_check_once(app, chat_id)
        await asyncio.sleep(interval_seconds)

async def _auto_orders_once(app: Application, chat_id: int):
    try:
        orders = get_recent_orders()
        if not orders:
            return
        orders_seen_map = app.bot_data.setdefault("seen_orders", {})
        seen_set = orders_seen_map.setdefault(chat_id, set())
        alerts = []
        for order in orders:
            oid = order.get("id") or order.get("number")
            if oid in seen_set:
                continue
            seen_set.add(oid)
            alerts.append(format_order_alert(order))
        if alerts:
            await app.bot.send_message(chat_id=chat_id, text="\n\n".join(alerts), parse_mode="HTML")
    except Exception as e:
        print(f"Auto-orders error for {chat_id}: {e}")

async def auto_orders_check(context: ContextTypes.DEFAULT_TYPE):
    chat_id = context.job.chat_id
    await _auto_orders_once(context.application, chat_id)

async def _auto_orders_loop(app: Application, chat_id: int, interval_seconds: int):
    await asyncio.sleep(5)
    while True:
        await _auto_orders_once(app, chat_id)
        await asyncio.sleep(interval_seconds)

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è$"), manual_check))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^üßæ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑—ã$"), manual_check_orders))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û—Ç–∫—Ä–æ–π –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å /start")
    app.run_polling()

if __name__ == "__main__":
    main()
